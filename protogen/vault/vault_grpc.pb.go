// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/vault/vault.proto

package vault

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VaultService_VaultGet_FullMethodName    = "/VaultService/VaultGet"
	VaultService_VaultCreate_FullMethodName = "/VaultService/VaultCreate"
	VaultService_VaultUpdate_FullMethodName = "/VaultService/VaultUpdate"
	VaultService_VaultDelete_FullMethodName = "/VaultService/VaultDelete"
)

// VaultServiceClient is the client API for VaultService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VaultServiceClient interface {
	VaultGet(ctx context.Context, in *VaultGetRequest, opts ...grpc.CallOption) (*VaultGetResponse, error)
	VaultCreate(ctx context.Context, in *VaultCreateRequest, opts ...grpc.CallOption) (*VaultCreateResponse, error)
	VaultUpdate(ctx context.Context, in *VaultUpdateRequest, opts ...grpc.CallOption) (*VaultUpdateResponse, error)
	VaultDelete(ctx context.Context, in *VaultDeleteRequest, opts ...grpc.CallOption) (*VaultDeleteResponse, error)
}

type vaultServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVaultServiceClient(cc grpc.ClientConnInterface) VaultServiceClient {
	return &vaultServiceClient{cc}
}

func (c *vaultServiceClient) VaultGet(ctx context.Context, in *VaultGetRequest, opts ...grpc.CallOption) (*VaultGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VaultGetResponse)
	err := c.cc.Invoke(ctx, VaultService_VaultGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) VaultCreate(ctx context.Context, in *VaultCreateRequest, opts ...grpc.CallOption) (*VaultCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VaultCreateResponse)
	err := c.cc.Invoke(ctx, VaultService_VaultCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) VaultUpdate(ctx context.Context, in *VaultUpdateRequest, opts ...grpc.CallOption) (*VaultUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VaultUpdateResponse)
	err := c.cc.Invoke(ctx, VaultService_VaultUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultServiceClient) VaultDelete(ctx context.Context, in *VaultDeleteRequest, opts ...grpc.CallOption) (*VaultDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VaultDeleteResponse)
	err := c.cc.Invoke(ctx, VaultService_VaultDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VaultServiceServer is the server API for VaultService service.
// All implementations must embed UnimplementedVaultServiceServer
// for forward compatibility.
type VaultServiceServer interface {
	VaultGet(context.Context, *VaultGetRequest) (*VaultGetResponse, error)
	VaultCreate(context.Context, *VaultCreateRequest) (*VaultCreateResponse, error)
	VaultUpdate(context.Context, *VaultUpdateRequest) (*VaultUpdateResponse, error)
	VaultDelete(context.Context, *VaultDeleteRequest) (*VaultDeleteResponse, error)
	mustEmbedUnimplementedVaultServiceServer()
}

// UnimplementedVaultServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVaultServiceServer struct{}

func (UnimplementedVaultServiceServer) VaultGet(context.Context, *VaultGetRequest) (*VaultGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VaultGet not implemented")
}
func (UnimplementedVaultServiceServer) VaultCreate(context.Context, *VaultCreateRequest) (*VaultCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VaultCreate not implemented")
}
func (UnimplementedVaultServiceServer) VaultUpdate(context.Context, *VaultUpdateRequest) (*VaultUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VaultUpdate not implemented")
}
func (UnimplementedVaultServiceServer) VaultDelete(context.Context, *VaultDeleteRequest) (*VaultDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VaultDelete not implemented")
}
func (UnimplementedVaultServiceServer) mustEmbedUnimplementedVaultServiceServer() {}
func (UnimplementedVaultServiceServer) testEmbeddedByValue()                      {}

// UnsafeVaultServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VaultServiceServer will
// result in compilation errors.
type UnsafeVaultServiceServer interface {
	mustEmbedUnimplementedVaultServiceServer()
}

func RegisterVaultServiceServer(s grpc.ServiceRegistrar, srv VaultServiceServer) {
	// If the following call pancis, it indicates UnimplementedVaultServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VaultService_ServiceDesc, srv)
}

func _VaultService_VaultGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VaultGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).VaultGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_VaultGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).VaultGet(ctx, req.(*VaultGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_VaultCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VaultCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).VaultCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_VaultCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).VaultCreate(ctx, req.(*VaultCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_VaultUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VaultUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).VaultUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_VaultUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).VaultUpdate(ctx, req.(*VaultUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultService_VaultDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VaultDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultServiceServer).VaultDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultService_VaultDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultServiceServer).VaultDelete(ctx, req.(*VaultDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VaultService_ServiceDesc is the grpc.ServiceDesc for VaultService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VaultService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VaultService",
	HandlerType: (*VaultServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VaultGet",
			Handler:    _VaultService_VaultGet_Handler,
		},
		{
			MethodName: "VaultCreate",
			Handler:    _VaultService_VaultCreate_Handler,
		},
		{
			MethodName: "VaultUpdate",
			Handler:    _VaultService_VaultUpdate_Handler,
		},
		{
			MethodName: "VaultDelete",
			Handler:    _VaultService_VaultDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/vault/vault.proto",
}
